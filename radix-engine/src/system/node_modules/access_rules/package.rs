use crate::blueprints::package::PackageAuthNativeBlueprint;
use crate::kernel::kernel_api::{KernelApi, KernelSubstateApi};
use crate::system::node_modules::access_rules::{
    LockOwnerRoleEvent, SetAndLockOwnerRoleEvent, SetOwnerRoleEvent,
};
use crate::system::node_modules::access_rules::{LockRoleEvent, SetAndLockRoleEvent};
use crate::system::system::{FieldSubstate, SystemService};
use crate::system::system_callback::{SystemConfig, SystemLockData};
use crate::system::system_callback_api::SystemCallbackObject;
use crate::system::system_modules::auth::{AuthError, ResolvedPermission};
use crate::types::*;
use crate::{errors::*, event_schema};
use native_sdk::runtime::Runtime;
use radix_engine_interface::api::field_api::LockFlags;
use radix_engine_interface::api::node_modules::auth::*;
use radix_engine_interface::api::node_modules::metadata::METADATA_BLUEPRINT;
use radix_engine_interface::api::node_modules::royalty::COMPONENT_ROYALTY_BLUEPRINT;
use radix_engine_interface::api::{
    ClientApi, ClientObjectApi, FieldValue, KVEntry, ObjectModuleId, OBJECT_HANDLE_SELF,
};
use radix_engine_interface::blueprints::package::{
    AuthConfig, BlueprintDefinitionInit, BlueprintType, BlueprintVersionKey, FunctionAuth,
    MethodAuthTemplate, PackageDefinition, RoleSpecification,
};
use radix_engine_interface::blueprints::resource::*;
use radix_engine_interface::schema::{
    BlueprintCollectionSchema, BlueprintFunctionsSchemaInit, BlueprintKeyValueStoreSchema,
    BlueprintSchemaInit, BlueprintStateSchemaInit, FieldSchema, FunctionSchemaInit, TypeRef,
};
use radix_engine_interface::types::*;

use super::SetRoleEvent;

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
pub enum AccessRulesError {
    UsedReservedRole(String),
    UsedReservedSpace,
}

#[derive(Debug, Clone, Eq, PartialEq, ScryptoSbor)]
#[sbor(transparent)]
pub struct OwnerRoleSubstate {
    pub owner_role_entry: OwnerRoleEntry,
}

pub struct AccessRulesNativePackage;

impl AccessRulesNativePackage {
    pub fn definition() -> PackageDefinition {
        let mut aggregator = TypeAggregator::<ScryptoCustomTypeKind>::new();

        let mut fields = Vec::new();
        fields.push(FieldSchema::static_field(
            aggregator.add_child_type_and_descendents::<OwnerRoleSubstate>(),
        ));

        let mut collections = Vec::new();
        collections.push(BlueprintCollectionSchema::KeyValueStore(
            BlueprintKeyValueStoreSchema {
                key: TypeRef::Static(aggregator.add_child_type_and_descendents::<ModuleRoleKey>()),
                value: TypeRef::Static(aggregator.add_child_type_and_descendents::<AccessRule>()),
                can_own: false,
            },
        ));

        let mut functions = BTreeMap::new();
        functions.insert(
            ACCESS_RULES_CREATE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: None,
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesCreateInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesCreateOutput>(),
                ),
                export: ACCESS_RULES_CREATE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_OWNER_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesSetOwnerRoleInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesSetOwnerRoleOutput>(),
                ),
                export: ACCESS_RULES_SET_OWNER_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_LOCK_OWNER_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesLockOwnerRoleInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesLockOwnerRoleOutput>(),
                ),
                export: ACCESS_RULES_LOCK_OWNER_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_SET_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesSetRoleInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesSetRoleOutput>(),
                ),
                export: ACCESS_RULES_SET_ROLE_IDENT.to_string(),
            },
        );
        functions.insert(
            ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            FunctionSchemaInit {
                receiver: Some(ReceiverInfo::normal_ref_mut()),
                input: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesGetRoleInput>(),
                ),
                output: TypeRef::Static(
                    aggregator.add_child_type_and_descendents::<AccessRulesGetRoleOutput>(),
                ),
                export: ACCESS_RULES_GET_ROLE_IDENT.to_string(),
            },
        );

        let events = event_schema! {
            aggregator,
            [
                SetOwnerRoleEvent,
                SetRoleEvent,
                LockRoleEvent,
                SetAndLockRoleEvent,
                LockOwnerRoleEvent,
                SetAndLockOwnerRoleEvent
            ]
        };

        let schema = generate_full_schema(aggregator);
        let blueprints = btreemap!(
            ACCESS_RULES_BLUEPRINT.to_string() => BlueprintDefinitionInit {
                blueprint_type: BlueprintType::default(),
                feature_set: btreeset!(),
                dependencies: btreeset!(),

                schema: BlueprintSchemaInit {
                    generics: vec![],
                    schema,
                    state: BlueprintStateSchemaInit {
                        fields,
                        collections,
                    },
                    events,
                    functions: BlueprintFunctionsSchemaInit {
                        virtual_lazy_load_functions: btreemap!(),
                        functions,
                    },
                },

                royalty_config: PackageRoyaltyConfig::default(),
                auth_config: AuthConfig {
                    function_auth: FunctionAuth::AllowAll,
                    method_auth: MethodAuthTemplate::AllowAll, // Mocked
                },
            }
        );

        PackageDefinition { blueprints }
    }

    pub fn authorization<Y: KernelApi<SystemConfig<V>>, V: SystemCallbackObject>(
        node_id: &NodeId,
        ident: &str,
        input: &IndexedScryptoValue,
        api: &mut SystemService<Y, V>,
    ) -> Result<ResolvedPermission, RuntimeError> {
        let permission = match ident {
            ACCESS_RULES_SET_ROLE_IDENT => {
                let input: AccessRulesSetRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;
                let role_list = Self::resolve_update_role_method_permission(
                    node_id,
                    input.module,
                    &input.role_key,
                    api,
                )?;
                ResolvedPermission::RoleList {
                    access_rules_of: node_id.clone(),
                    role_list,
                    module_id: input.module,
                }
            }
            ACCESS_RULES_SET_OWNER_ROLE_IDENT => {
                Self::resolve_update_owner_role_method_permission(node_id, api)?
            }
            ACCESS_RULES_LOCK_OWNER_ROLE_IDENT => {
                Self::resolve_update_owner_role_method_permission(node_id, api)?
            }
            ACCESS_RULES_GET_ROLE_IDENT => ResolvedPermission::AllowAll,
            _ => {
                return Err(RuntimeError::SystemModuleError(
                    SystemModuleError::AuthError(AuthError::NoMethodMapping(FnIdentifier {
                        blueprint_id: BlueprintId::new(
                            &ACCESS_RULES_MODULE_PACKAGE,
                            ACCESS_RULES_BLUEPRINT,
                        ),
                        ident: FnIdent::Application(ident.to_string()),
                    })),
                ));
            }
        };

        Ok(permission)
    }

    pub fn invoke_export<Y>(
        export_name: &str,
        input: &IndexedScryptoValue,
        api: &mut Y,
    ) -> Result<IndexedScryptoValue, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        match export_name {
            ACCESS_RULES_CREATE_IDENT => {
                let input: AccessRulesCreateInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::create(input.owner_role, input.roles, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_OWNER_ROLE_IDENT => {
                let input: AccessRulesSetOwnerRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::set_owner_role(input.rule, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_LOCK_OWNER_ROLE_IDENT => {
                let _input: AccessRulesLockOwnerRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::lock_owner_role(api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_SET_ROLE_IDENT => {
                let input: AccessRulesSetRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::set_role(input.module, input.role_key, input.rule, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            ACCESS_RULES_GET_ROLE_IDENT => {
                let input: AccessRulesGetRoleInput = input.as_typed().map_err(|e| {
                    RuntimeError::ApplicationError(ApplicationError::InputDecodeError(e))
                })?;

                let rtn = Self::get_role(input.module, input.role_key, api)?;
                Ok(IndexedScryptoValue::from_typed(&rtn))
            }
            _ => Err(RuntimeError::ApplicationError(
                ApplicationError::ExportDoesNotExist(export_name.to_string()),
            )),
        }
    }

    pub fn is_reserved_role_key(role_key: &RoleKey) -> bool {
        return role_key.key.starts_with("_");
    }

    fn resolve_update_owner_role_method_permission<
        Y: KernelApi<SystemConfig<V>>,
        V: SystemCallbackObject,
    >(
        receiver: &NodeId,
        api: &mut SystemService<Y, V>,
    ) -> Result<ResolvedPermission, RuntimeError> {
        let handle = api.kernel_open_substate(
            receiver,
            ACCESS_RULES_BASE_PARTITION
                .at_offset(ACCESS_RULES_FIELDS_PARTITION_OFFSET)
                .unwrap(),
            &SubstateKey::Field(0u8),
            LockFlags::read_only(),
            SystemLockData::default(),
        )?;

        let owner_role_substate: FieldSubstate<OwnerRoleSubstate> =
            api.kernel_read_substate(handle)?.as_typed().unwrap();
        api.kernel_close_substate(handle)?;

        let rule = match owner_role_substate.value.0.owner_role_entry.updater {
            OwnerRoleUpdater::None => AccessRule::DenyAll,
            OwnerRoleUpdater::Owner => owner_role_substate.value.0.owner_role_entry.rule,
            OwnerRoleUpdater::Object => rule!(require(global_caller(GlobalAddress::new_or_panic(
                receiver.0
            )))),
        };

        Ok(ResolvedPermission::AccessRule(rule))
    }

    fn resolve_update_role_method_permission<
        Y: KernelApi<SystemConfig<V>>,
        V: SystemCallbackObject,
    >(
        receiver: &NodeId,
        module: ObjectModuleId,
        role_key: &RoleKey,
        api: &mut SystemService<Y, V>,
    ) -> Result<RoleList, RuntimeError> {
        if Self::is_reserved_role_key(&role_key) {
            return Ok(RoleList::none());
        }

        let blueprint_id = match module {
            ObjectModuleId::Main => {
                let info = api.get_object_info(receiver)?;
                info.blueprint_id
            }
            ObjectModuleId::Metadata => {
                BlueprintId::new(&METADATA_MODULE_PACKAGE, METADATA_BLUEPRINT)
            }
            ObjectModuleId::Royalty => {
                BlueprintId::new(&ROYALTY_MODULE_PACKAGE, COMPONENT_ROYALTY_BLUEPRINT)
            }
            ObjectModuleId::AccessRules => {
                BlueprintId::new(&ACCESS_RULES_MODULE_PACKAGE, ACCESS_RULES_BLUEPRINT)
            }
        };

        let auth_template = PackageAuthNativeBlueprint::get_bp_auth_template(
            blueprint_id.package_address.as_node_id(),
            &BlueprintVersionKey::new_default(blueprint_id.blueprint_name.as_str()),
            api.api,
        )?
        .method_auth;

        match auth_template {
            MethodAuthTemplate::AllowAll => Ok(RoleList::none()),
            MethodAuthTemplate::StaticRoles(roles) => match roles.roles {
                RoleSpecification::Normal(roles) => match roles.get(&role_key) {
                    Some(role_list) => Ok(role_list.clone()),
                    None => Ok(RoleList::none()),
                },
                RoleSpecification::UseOuter => Ok(RoleList::none()),
            },
        }
    }

    pub(crate) fn create<Y>(
        owner_role: OwnerRoleEntry,
        roles: BTreeMap<ObjectModuleId, RolesInit>,
        api: &mut Y,
    ) -> Result<Own, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        if roles.contains_key(&ObjectModuleId::AccessRules) {
            return Err(RuntimeError::ApplicationError(
                ApplicationError::AccessRulesError(AccessRulesError::UsedReservedSpace),
            ));
        }

        let mut role_entries = BTreeMap::new();

        for (module, roles) in roles {
            for (role_key, role_def) in roles.data {
                if Self::is_reserved_role_key(&role_key) {
                    return Err(RuntimeError::ApplicationError(
                        ApplicationError::AccessRulesError(AccessRulesError::UsedReservedRole(
                            role_key.key.to_string(),
                        )),
                    ));
                }

                let module_role_key = ModuleRoleKey::new(module, role_key);

                let value = role_def.map(|rule| scrypto_encode(&rule).unwrap());

                let kv_entry = KVEntry {
                    value,
                    locked: false,
                };

                role_entries.insert(scrypto_encode(&module_role_key).unwrap(), kv_entry);
            }
        }

        let owner_role_substate = OwnerRoleSubstate {
            owner_role_entry: owner_role.clone(),
        };

        let owner_role_field = match owner_role.updater {
            OwnerRoleUpdater::None => FieldValue::immutable(&owner_role_substate),
            OwnerRoleUpdater::Owner | OwnerRoleUpdater::Object => {
                FieldValue::new(&owner_role_substate)
            }
        };

        let component_id = api.new_object(
            ACCESS_RULES_BLUEPRINT,
            vec![],
            None,
            vec![owner_role_field],
            btreemap!(
                0u8 => role_entries,
            ),
        )?;

        Ok(Own(component_id))
    }

    fn set_owner_role<Y>(rule: AccessRule, api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_open_field(OBJECT_HANDLE_SELF, 0u8, LockFlags::MUTABLE)?;

        let mut owner_role: OwnerRoleSubstate = api.field_read_typed(handle)?;
        owner_role.owner_role_entry.rule = rule.clone();
        api.field_write_typed(handle, owner_role)?;
        api.field_close(handle)?;

        Runtime::emit_event(api, SetOwnerRoleEvent { rule })?;

        Ok(())
    }

    fn lock_owner_role<Y>(api: &mut Y) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let handle = api.actor_open_field(OBJECT_HANDLE_SELF, 0u8, LockFlags::MUTABLE)?;
        let mut owner_role: OwnerRoleSubstate = api.field_read_typed(handle)?;
        owner_role.owner_role_entry.updater = OwnerRoleUpdater::None;
        api.field_lock(handle)?;
        api.field_close(handle)?;

        Runtime::emit_event(api, LockOwnerRoleEvent {})?;

        Ok(())
    }

    fn set_role<Y>(
        module: ObjectModuleId,
        role_key: RoleKey,
        rule: AccessRule,
        api: &mut Y,
    ) -> Result<(), RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        if Self::is_reserved_role_key(&role_key) {
            if !module.eq(&ObjectModuleId::AccessRules) {
                return Err(RuntimeError::ApplicationError(
                    ApplicationError::AccessRulesError(AccessRulesError::UsedReservedRole(
                        role_key.key.to_string(),
                    )),
                ));
            }
        }

        let module_role_key = ModuleRoleKey::new(module, role_key.clone());

        let handle = api.actor_open_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&module_role_key).unwrap(),
            LockFlags::MUTABLE,
        )?;

        // Overwrite whatever access rule (or empty) is there
        api.key_value_entry_set_typed(handle, rule.clone())?;

        api.key_value_entry_set_typed(handle, rule.clone())?;
        api.key_value_entry_close(handle)?;

        Runtime::emit_event(api, SetRoleEvent { role_key, rule })?;

        Ok(())
    }

    pub(crate) fn get_role<Y>(
        module: ObjectModuleId,
        role_key: RoleKey,
        api: &mut Y,
    ) -> Result<Option<AccessRule>, RuntimeError>
    where
        Y: ClientApi<RuntimeError>,
    {
        let module_role_key = ModuleRoleKey::new(module, role_key);

        let handle = api.actor_open_key_value_entry(
            OBJECT_HANDLE_SELF,
            0u8,
            &scrypto_encode(&module_role_key).unwrap(),
            LockFlags::read_only(),
        )?;

        let rule: Option<AccessRule> = api.key_value_entry_get_typed(handle)?;

        api.key_value_entry_close(handle)?;

        Ok(rule)
    }
}
