[package]
name = "radix-engine"
version = "0.11.0"
edition = "2021"

[dependencies]
sbor = { path = "../sbor", default-features = false }
radix-engine-constants = { path = "../radix-engine-constants" }
radix-engine-interface = { path = "../radix-engine-interface", default-features = false }
radix-engine-common = { path = "../radix-engine-common", default-features = false }
radix-engine-store-interface = { path = "../radix-engine-store-interface", default-features = false }
native-sdk = { path = "../native-sdk", default-features = false }
transaction = { path = "../transaction", default-features = false }
utils = { path = "../utils", default-features = false }
colored = { version = "2.0.0", default-features = false }
hex = { version = "0.4.3", default-features = false }
num-traits = { version = "0.2.15", default-features = false }
bitflags = { version = "1.3" }
lru = { version = "0.8.1", default-features = false, optional = true}
moka = { version = "0.9.4", features = ["sync"], default-features = false, optional = true }
strum = { version = "0.24", default-features = false, features = ["derive"] }
perfcnt = { version = "0.8.0", optional = true }
radix-engine-profiling = { path = "../radix-engine-profiling", optional = true, features = ["resource_tracker"] }
resources-tracker-macro = { path = "../radix-engine-profiling/resources-tracker-macro" }
paste = { version = "1.0.13" }

# WASM de-/serialization
parity-wasm = { version = "0.42.2", features = ["sign_ext"] }

# WASM validation
# Currently wasmparser does not support 'no_std` - https://github.com/bytecodealliance/wasmtime/issues/3495
# Thus using a wasmparser fork with 'no_std' support: https://crates.io/crates/wasmparser-nostd
wasmparser = { version = "0.100.1", package = "wasmparser-nostd", default-features = false }

# WASM instrumentation
wasm-instrument = { version = "0.1.0", features = ["sign_ext"] }

# WASM execution
# - Wasmi is a WASM interpreter that supports WebAssembly MVP
# - Wasmer is a WASM engine with multiple backends: `singlepass` (linear time), `LLVM` and `cranelift`

# TODO: use official wasmi package when the issue https://github.com/paritytech/wasmi/issues/631 is fixed
wasmi = {  git = "https://github.com/radixdlt/wasmi.git", branch = "v0.23.0_store_clone"  }
wasmer = { version = "2.2.1", optional = true }
wasmer-compiler-singlepass = { version = "2.2.1", optional = true }

serde_json = { version = "1.0.81", optional = true, default-features = false }
lazy_static = { version = "1.4.0" }

[dev-dependencies]
wabt = { version = "0.10.0" }

[features]
# You should enable either `std` or `alloc`
default = ["std", "moka"]
std = ["sbor/std", "native-sdk/std", "wasmi/std", "transaction/std", "radix-engine-interface/std", "radix-engine-store-interface/std", "utils/std", "serde_json?/std", "wasmparser/std"]
alloc = ["sbor/alloc", "native-sdk/alloc", "transaction/alloc", "radix-engine-interface/alloc", "radix-engine-store-interface/alloc", "utils/alloc", "lru?/hashbrown", "serde_json?/alloc"]

# Enables heap memory and CPU cycles resource tracing - available only for Linux OS on x86 arch.
# Requires CAP_PERFMON capability for the process (sudo setcap cap_perfmon=eip <exec_file>).
cpu_ram_metrics = ["std", "dep:perfcnt"]

# Use `wasmer` as WASM engine, otherwise `wasmi`
wasmer = ["dep:wasmer", "dep:wasmer-compiler-singlepass"]

# Two features for the two possible libraries to use for caching. Moka is not WASM friendly while LRU is. One of these
# two features must be enabled.
moka = ["dep:moka"]
lru = ["dep:lru"]

resource_tracker = ["dep:radix-engine-profiling", "resources-tracker-macro/resource_tracker", "radix-engine-common/resource_tracker"]

# This flag is set by fuzz-tests framework and it disables cache in wasm_instrumenter/wasmi/wasmer
# to prevent non-determinism when fuzzing
radix_engine_fuzzing = []

# This flag enables code parts used only for testing. Using "test" config option is not enough in cases,
# when external crate is used for tests (eg. radix-engine-tests)
radix_engine_tests = []

# Ref: https://bheisler.github.io/criterion.rs/book/faq.html#cargo-bench-gives-unrecognized-option-errors-for-valid-command-line-options
[lib]
bench = false
